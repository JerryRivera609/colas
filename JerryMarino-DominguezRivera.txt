Resumen de Cambios
Se implementaron excepciones para un manejo de errores más adecuado.
Se documentó mejor el código para mejorar su legibilidad.
Se ajustaron algunos tipos de retorno para permitir el manejo de errores más efectivamente.
Se mejoró el formato de salida y los mensajes al usuario para mayor claridad.
Con estas mejoras, el código es más robusto y más fácil de mantener.






import java.util.Scanner;

public class ColaCircular {
    private int[] cola; // Arreglo para almacenar los elementos
    private int capacidad; // Tamaño máximo de la cola
    private int frente; // Índice del frente de la cola
    private int finalCola; // Índice del final de la cola
    private int size; // Tamaño actual de la cola

    // Constructor para inicializar la cola con un tamaño N
    public ColaCircular(int N) {
        capacidad = N;
        cola = new int[capacidad];
        frente = 0;
        finalCola = -1;
        size = 0;
    }

    // Método para verificar si la cola está vacía
    public boolean estaVacia() {
        return size == 0;
    }

    // Método para verificar si la cola está llena
    public boolean estaLlena() {
        return size == capacidad;
    }

    // Método para agregar un elemento a la cola
    public void encolar(int elemento) {
        if (estaLlena()) {
            throw new IllegalStateException("Cola llena. No se puede agregar el elemento " + elemento);
        }
        finalCola = (finalCola + 1) % capacidad;
        cola[finalCola] = elemento;
        size++;
        System.out.println("Elemento encolado: " + elemento);
    }

    // Método para remover un elemento de la cola
    public Integer desencolar() {
        if (estaVacia()) {
            System.out.println("Cola vacía. No se puede remover elementos.");
            return null; // Usamos null para indicar cola vacía
        }
        int elemento = cola[frente];
        frente = (frente + 1) % capacidad;
        size--;
        return elemento;
    }

    // Método para ver el primer elemento sin eliminarlo
    public Integer verFrente() {
        if (estaVacia()) {
            System.out.println("Cola vacía.");
            return null; // Usamos null para indicar cola vacía
        }
        return cola[frente];
    }

    // Método para ver el tamaño actual de la cola
    public int tamanoActual() {
        return size;
    }

    // Mostrar el estado de la cola
    public void mostrarCola() {
        if (estaVacia()) {
            System.out.println("Cola vacía.");
            return;
        }
        System.out.print("Cola: ");
        for (int i = 0; i < size; i++) {
            System.out.print(cola[(frente + i) % capacidad] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            // Solicitar el tamaño de la cola al usuario
            System.out.print("Ingrese el tamaño de la cola (N): ");
            int N = scanner.nextInt();

            // Crear la cola con el tamaño especificado
            ColaCircular cola = new ColaCircular(N);

            boolean continuar = true;
            while (continuar) {
                System.out.println("\nOpciones:");
                System.out.println("1. Encolar un elemento");
                System.out.println("2. Desencolar un elemento");
                System.out.println("3. Mostrar la cola");
                System.out.println("4. Ver el primer elemento");
                System.out.println("5. Salir");
                System.out.print("Seleccione una opción: ");
                int opcion = scanner.nextInt();

                switch (opcion) {
                    case 1:
                        // Encolar elementos
                        System.out.print("Ingrese el elemento a encolar: ");
                        int elemento = scanner.nextInt();
                        cola.encolar(elemento);
                        break;
                    case 2:
                        // Desencolar un elemento
                        Integer desencolado = cola.desencolar();
                        if (desencolado != null) {
                            System.out.println("Elemento desencolado: " + desencolado);
                        }
                        break;
                    case 3:
                        // Mostrar la cola
                        cola.mostrarCola();
                        break;
                    case 4:
                        // Ver el primer elemento sin desencolar
                        Integer frente = cola.verFrente();
                        if (frente != null) {
                            System.out.println("Primer elemento en la cola: " + frente);
                        }
                        break;
                    case 5:
                        // Salir del programa
                        continuar = false;
                        System.out.println("Saliendo...");
                        break;
                    default:
                        System.out.println("Opción no válida. Intente de nuevo.");
                }
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }
}

